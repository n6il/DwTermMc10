0001 f865                    CNSLIN	equ	$F865
0002 f883                    KEYIN	equ	$F883
0003 f9c6                    PUTCHR	equ	$F9C6
0004                         * BLINK	equ	$F83F		* RoM's routine doesnt work well for us
0005                         
0006 000d                    CR	equ	13
0007 0003                    BREAK	equ	3
0008 008e                    CTRL_1	equ	142
0009 0093                    CTRL_2	equ	147
0010 0095                    CTRL_7	equ	149
0011 009d                    CTRL_8	equ	157
0012                         
0013 0005                    SLEEP_FAST	equ	5
0014 00c8                    SLEEP_SLOW	equ	200
0015 00d6                    BUFSIZ	equ	214
0016                         
0017 0001                    channel equ	1
0018                         
0019                         * DW Commands
0020 005a                    OP_DWINIT	equ	$5A
0021 00c4                    OP_SERSETSTAT	equ	$C4
0022 0043                    OP_SERREAD	equ	$43
0023 0063                    OP_SERREADM	equ	$63
0024 0080                    OP_FASTWRITE	equ	$80
0025                         * DW SERSETSTAT Codes
0026 0029                    SS_Open		equ	$29
0027 002a                    SS_Close	equ	$2A
0028                         	
0029 4e20                    	org	20000
0030                         
0031                         start:
0032 4e20 ce 50 f6           	ldx	#MESSAGE	* Print Banner
0033 4e23 c6 4c              	ldab	#MSGLEN
0034 4e25 bd 4f 24           	jsr	putstr
0035 4e28 bd 4f 1b           	jsr	putpr		* Print initial prompt
0036 4e2b 86 c8              	ldaa	#SLEEP_SLOW	* Initialize sleep counter
0037 4e2d b7 51 78           	staa	SLPCNTR
0038                         
0039 4e30 bd 4e f0           	jsr	dwinit		* Initialize DW
0040 4e33 86 01              	ldaa	#channel	* Open virtual serial channel 1
0041 4e35 bd 4f 41           	jsr	open_channel
0042 4e38 bd 4f 6c           	jsr	get_status	* Initial get status
0043 4e3b 20 03              	bra	inkey		* start the main look
0044                         
0045                         * need this as a target for conditionals as done is too far away
0046                         Xdone:
0047 4e3d 7e 4e dd           	jmp	done
0048                         
0049                         * Keyboard input loop
0050                         inkey:
0051 4e40 bd 50 a9           	jsr	BLINK
0052 4e43 bd f8 83           	jsr	KEYIN		* get char from keyboard
0053 4e46 81 00              	cmpa	#0		* check for no input
0054 4e48 27 3a              	beq	sleep		* sleep and loop if not
0055                         
0056 4e4a fe 01 80           	ldx	CRSPTR		* got something so clear the cursor first
0057 4e4d c6 8f              	ldab	#143
0058 4e4f e7 00              	stab	,X
0059                         
0060 4e51 81 03              	cmpa	#BREAK		* BREAK key
0061 4e53 27 e8              	beq	Xdone		* get outta here
0062                         *	cmpa	#CR
0063                         *	beq	mcr
0064 4e55 81 95              	cmpa	#CTRL_7		* 7-bit toggle
0065 4e57 26 0d              	bne	inswitch2
0066 4e59 c6 ff              	ldab	#$FF		* toggle the flag
0067 4e5b f8 51 7d           	eorb	disp_7bit
0068 4e5e f7 51 7d           	stab	disp_7bit
0069 4e61 bd 50 82           	jsr	b7togglemsg
0070 4e64 20 1e              	bra	sleep
0071                         inswitch2:
0072 4e66 81 9d              	cmpa	#CTRL_8		* ascii toggle
0073 4e68 26 0d              	bne	dodwwrite
0074 4e6a c6 ff              	ldab	#$FF		* toggle the flag
0075 4e6c f8 51 7c           	eorb	disp_ascii
0076 4e6f f7 51 7c           	stab	disp_ascii
0077 4e72 bd 50 75           	jsr	atogglemsg
0078 4e75 20 0d              	bra	sleep
0079                         dodwwrite:
0080 4e77 c6 01              	ldab	#1		* dw channel number
0081 4e79 bd 4f 88           	jsr	writeChannel	* write char to drivewire
0082 4e7c bd f9 c6           	jsr	PUTCHR		* write char to screen
0083 4e7f c6 05              	ldab	#SLEEP_FAST	* fast sleep since a key was entered
0084 4e81 f7 51 78           	stab	SLPCNTR
0085                         sleep:
0086 4e84 7a 51 78           	dec	SLPCNTR		* decrement sleep counter
0087 4e87 26 b7              	bne	inkey		* loop until 0
0088                         
0089                         * Try to read data from DW Server
0090                         input:
0091 4e89 86 01              	ldaa	#1		* dw channel
0092 4e8b c6 d6              	ldab	#BUFSIZ		* buffer size
0093 4e8d 7f 4f a0           	clr	rcwait		* no wait
0094 4e90 bd 4f a5           	jsr	readChannel	* try to read from drivewire
0095 4e93 16                 	tab			* move result to b
0096 4e94 c1 00              	cmpb	#0		* nothing was read
0097 4e96 27 04              	beq	slow		* slow sleep
0098                         fast:
0099 4e98 86 05              	ldaa	#SLEEP_FAST	* poll dw faster if there was some data
0100 4e9a 20 02              	bra	update
0101                         slow:
0102 4e9c 86 c8              	ldaa	#SLEEP_SLOW	* poll kb faster if there was no data
0103                         update:
0104 4e9e b7 51 78           	staa	SLPCNTR		* update sleep counter
0105                         
0106                         * process data buffer from dw
0107                         process:
0108 4ea1 ce 52 54           	ldx	#buffer
0109                         procloop:
0110 4ea4 5d                 	tstb			* check if anything was read
0111 4ea5 27 14              	beq	channel_check	* move on if not
0112 4ea7 a6 00              	ldaa	,x		* Get the char
0113 4ea9 0c                 	clc
0114 4eaa bd 50 0c           	jsr	do_iac		* Process Telnet IAC Protocol
0115 4ead 25 08              	bcs	proccont	* if carry set: don't output char
0116 4eaf bd 50 61           	jsr	do_ascii
0117 4eb2 25 03              	bcs	proccont	* if carry set: don't output char
0118                         procprint:
0119 4eb4 bd f9 c6           	jsr	PUTCHR		* output the char
0120                         proccont:
0121 4eb7 5a                 	decb			* counter
0122 4eb8 08                 	inx			* bufer pointer
0123 4eb9 20 e9              	bra	procloop	* go for more
0124                         
0125                         * Check the Dw channel and re-open it if necessary
0126                         channel_check:
0127 4ebb 7d 51 79           	tst	channel_open	* check if the channel is still open
0128 4ebe 26 80              	bne	inkey		* return to keyboard loop if so
0129 4ec0 86 01              	ldaa	#1		* ensure channel is closed
0130 4ec2 bd 4f 58           	jsr	close_channel
0131 4ec5 bd 4f 6c           	jsr	get_status	* get status to make sure server closed it
0132 4ec8 86 01              	ldaa	#1
0133 4eca bd 4f 41           	jsr	open_channel	* reopen the channel
0134 4ecd bd 4f 6c           	jsr	get_status	* initial get status
0135 4ed0 86 c8              	ldaa	#SLEEP_SLOW	* start with sleep slow
0136 4ed2 b7 51 78           	staa	SLPCNTR
0137                         mcr:
0138 4ed5 86 0d              	ldaa	#CR		* print CR and prompt
0139 4ed7 bd 4f 18           	jsr	putcpr
0140 4eda 7e 4e 40           	jmp	inkey		* return to the keyboard loop
0141                         
0142                         done:
0143 4edd 7d 51 79           	tst	channel_open
0144 4ee0 27 05              	beq	done2
0145 4ee2 86 01              	ldaa	#1
0146 4ee4 bd 4f 58           	jsr	close_channel
0147                         done2:
0148 4ee7 ce 51 46           	ldx	#BYEMSG
0149 4eea c6 32              	ldab	#BYELEN
0150 4eec bd 4f 24           	jsr	putstr
0151 4eef 39                 	rts
0152                         
0153                         dwinit:
0154 4ef0 ce 4f 03           	ldx	#initmsg
0155 4ef3 cc 00 02           	ldd	#2
0156 4ef6 bd 53 96           	jsr	SerWrite
0157 4ef9 ce 52 54           	ldx	#buffer
0158 4efc cc 00 01           	ldd	#1
0159 4eff bd 53 2a           	jsr	SerRead
0160 4f02 39                 	rts
0161                         initmsg:
0162 4f03 5a ff              	fcb	OP_DWINIT, $FF
0163                         
0164                         openchan:
0165 4f05 39                  rts
0166                         
0167                         getstat:
0168 4f06 39                  rts
0169                         
0170                         * input - A char to write
0171                         dwwritechr:
0172 4f07 3c                 	pshx
0173 4f08 36                 	psha
0174 4f09 ce 51 7e           	ldx	#cmdbuf
0175 4f0c a7 00              	staa	,x
0176 4f0e cc 00 01           	ldd	#1
0177 4f11 bd 53 96           	jsr	SerWrite
0178 4f14 32                 	pula
0179 4f15 38                 	pulx
0180 4f16 39                 	rts
0181                         
0182                         dwread:
0183 4f17 39                  rts
0184                         
0185                         putcpr:
0186 4f18 bd f9 c6           	jsr	PUTCHR
0187                         putpr:
0188 4f1b ce 51 42           	ldx	#PROMPT
0189 4f1e c6 04              	ldab	#PRLEN
0190 4f20 bd 4f 24           	jsr	putstr
0191 4f23 39                 	rts
0192                         
0193                         putstr:
0194                         psloop:
0195 4f24 c1 00              	cmpb	#0
0196 4f26 27 09              	beq psdone
0197 4f28 a6 00              	ldaa	,x
0198 4f2a bd f9 c6           	jsr	PUTCHR
0199 4f2d 08                 	inx
0200 4f2e 5a                 	decb
0201 4f2f 20 f3              	bra	psloop
0202 4f31 39                 psdone	rts
0203                         
0204                         mPUTCHR:
0205 4f32 3c                 	pshx
0206 4f33 37                 	pshb
0207 4f34 fe 01 80           	ldx	CRSPTR
0208 4f37 c6 8f              	ldab	#143
0209 4f39 e7 00              	stab	,X
0210 4f3b 33                 	pulb
0211 4f3c 38                 	pulx
0212 4f3d bd f9 c6           	jsr	PUTCHR
0213 4f40 39                 	rts
0214                         
0215                         * openCh - open Dw Channel
0216                         * input: A - channel
0217                         open_channel:
0218 4f41 ce 51 7e           	ldx	#cmdbuf
0219 4f44 c6 c4              	ldab	#OP_SERSETSTAT	* Param 1: DW Command
0220 4f46 e7 00              	stab	,x
0221 4f48 a7 01              	staa	1,x		* Param 2: Channel
0222 4f4a b7 51 79           	staa	channel_open
0223 4f4d c6 29              	ldab	#SS_Open	* Param 3: Serstat op
0224 4f4f e7 02              	stab	2,x
0225 4f51 cc 00 03           	ldd	#3		* Command Length
0226 4f54 bd 53 96           	jsr	SerWrite
0227 4f57 39                 	rts
0228                         
0229                         * close_channel - open Dw Channel
0230                         * input: A - channel
0231                         close_channel:
0232 4f58 ce 51 7e           	ldx	#cmdbuf
0233 4f5b c6 c4              	ldab	#OP_SERSETSTAT	* Param 1: DW Command
0234 4f5d e7 00              	stab	,x
0235 4f5f a7 01              	staa	1,x		* Param 2: Channel
0236 4f61 c6 2a              	ldab	#SS_Close	* Param 3: Serstat op
0237 4f63 e7 02              	stab	2,x
0238 4f65 cc 00 03           	ldd	#3		* Command Length
0239 4f68 bd 53 96           	jsr	SerWrite
0240 4f6b 39                 	rts
0241                         
0242                         * get_status - get Dw Channel status
0243                         * output: X - checksum
0244                         *	CC - 0 - success, 1 Framing error, -1 Timeout
0245                         get_status:
0246 4f6c ce 51 7e           	ldx	#cmdbuf
0247 4f6f c6 43              	ldab	#OP_SERREAD	* Param 1: DW Command
0248 4f71 e7 00              	stab 	,x
0249 4f73 cc 00 01           	ldd	#1		* Command Length
0250 4f76 bd 53 96           	jsr	SerWrite
0251                         
0252 4f79 ce 51 7a           	ldx	#status
0253 4f7c cc 00 00           	ldd	#0		* clear status
0254 4f7f ed 00              	std	,x
0255 4f81 cc 00 02           	ldd	#2		* Get 2 bytes
0256 4f84 bd 53 2a           	jsr	SerRead
0257 4f87 39                 	rts			* Status and CC set
0258                         	
0259                         * writeChannel
0260                         * input - B channel
0261                         * 	A data
0262                         writeChannel:
0263 4f88 3c                 	pshx
0264 4f89 36                 	psha
0265 4f8a 37                 	pshb
0266 4f8b ce 51 7e           	ldx	#cmdbuf
0267 4f8e a7 01              	staa	1,x		* Param 2: data
0268 4f90 86 80              	ldaa	#OP_FASTWRITE	* OP_FASTWRITE+Channel
0269 4f92 1b                 	aba			
0270 4f93 a7 00              	staa	,x		* Param 1: FASTWRITE command
0271 4f95 cc 00 02           	ldd	#2		* Command Length
0272 4f98 bd 53 96           	jsr	SerWrite
0273 4f9b 33                 	pulb
0274 4f9c 32                 	pula
0275 4f9d 38                 	pulx
0276 4f9e 39                 	rts
0277                         
0278                         * readChannel
0279                         * input - A channel
0280                         *	B size
0281                         *	wait - global
0282                         * variables
0283 4f9f 00                 rcread	fcb	0
0284 4fa0 00                 rcwait	fcb	0
0285 4fa1 00                 rcchannel fcb	0
0286 4fa2 00                 rcsize	fcb	0
0287 4fa3 00 00              rcbuf	fdb	0
0288                         
0289                         readChannel:
0290 4fa5 3c                 	pshx
0291 4fa6 b7 4f a1           	staa	rcchannel	* Save channel
0292 4fa9 f7 4f a2           	stab	rcsize		* Save size
0293 4fac 7f 4f 9f           	clr	rcread		* initialize read counter
0294 4faf ce 52 54           	ldx	#buffer
0295 4fb2 ff 4f a3           	stx	rcbuf	
0296 4fb5 bd 4f 6c           	jsr	get_status
0297 4fb8 27 05              	beq	rc2cont		*  0 - got the status
0298                         rc2exit:
0299 4fba 38                 	pulx
0300 4fbb b6 4f 9f           	ldaa	rcread
0301 4fbe 39                 	rts
0302                         rc2cont:
0303 4fbf b6 51 7a           	ldaa	status
0304 4fc2 27 f6              	beq	rc2exit		*  0 - nothing read
0305 4fc4 81 10              	cmpa	#16		* 16 - status
0306 4fc6 27 37              	beq	rc2status
0307 4fc8 2e 0a              	bgt	rc2multi	* >16 -  multiple bytes
0308                         rc2readone:
0309 4fca b6 51 7b           	ldaa	status+1	* get the byte
0310 4fcd a7 00              	staa	,x		* save it
0311 4fcf 7c 4f 9f           	inc	rcread		* increment read counter
0312 4fd2 20 e6              	bra	rc2exit		* all done
0313                         rc2multi:
0314 4fd4 86 63              	ldaa	#OP_SERREADM	* Param 1: Serial Read Command
0315 4fd6 ce 51 7e           	ldx	#cmdbuf
0316 4fd9 a7 00              	staa	,x
0317 4fdb b6 4f a1           	ldaa	rcchannel	* Param 2: Channel
0318 4fde a7 01              	staa	1,x
0319 4fe0 b6 51 7b           	ldaa	status+1	* Param 3: bytes
0320 4fe3 a7 02              	staa	2,x
0321 4fe5 cc 00 03           	ldd	#3		* Command Length
0322 4fe8 bd 53 96           	jsr	SerWrite	* Send the read command
0323 4feb ce 52 54           	ldx	#buffer		* X - buffer
0324 4fee 4f                 	clra			* D - num bytes to read
0325 4fef f6 51 7b           	ldab	status+1
0326 4ff2 bd 53 2a           	jsr	SerRead		* Read the data in
0327 4ff5 26 c3              	bne	rc2exit		* Something went wrong
0328 4ff7 b6 51 7b           	ldaa	status+1	* Get the number of bytes requested
0329 4ffa b7 4f 9f           	staa	rcread		* Save is as successfully read
0330 4ffd 20 bb              	bra	rc2exit		* All done
0331                         rc2status:
0332                         *	ldaa	status+1
0333                         *	suba	#17
0334                         *	cmpa	rcchannel
0335                         *	bne	rc2status2
0336 4fff 7f 51 79           	clr	channel_open	* channel is closed
0337 5002 bd 4f 6c           	jsr	get_status	* need to get status to cause it to close
0338 5005 20 b3              	bra	rc2exit		* so get outta here
0339                         rc2status2:
0340 5007 81 ff              	cmpa	#255		* reboot request
0341 5009 20 af              	bra	rc2exit		* and anything else just exit
0342                         
0343                         
0344 500b 00                 iac	fcb	0
0345                         * do_iac - process Telnet IAC Protocol
0346                         * input A - char
0347                         * outpt A - what to send
0348                         do_iac:
0349 500c 37                 	pshb
0350 500d 7d 50 0b           	tst	iac
0351 5010 27 1c              	beq	iswitch
0352 5012 c6 ff              	ldab	#255
0353 5014 f7 51 7e           	stab	cmdbuf
0354 5017 f6 50 0b           	ldab	iac
0355 501a f7 51 7f           	stab	cmdbuf+1
0356 501d b7 51 80           	staa	cmdbuf+2
0357 5020 ce 51 7e           	ldx	#cmdbuf
0358 5023 cc 00 03           	ldd	#3
0359 5026 bd 53 96           	jsr	SerWrite
0360 5029 7f 50 0b           	clr	iac
0361 502c 20 30              	bra	inosend
0362                         iswitch:
0363 502e 81 fb              	cmpa	#251
0364 5030 26 07              	bne iswitch2
0365 5032 c6 fd              	ldab	#253
0366 5034 f7 50 0b           	stab	iac
0367 5037 20 25              	bra	inosend
0368                         iswitch2:
0369 5039 81 fc              	cmpa	#252
0370 503b 26 07              	bne	iswitch3
0371 503d c6 fe              	ldab	#254
0372 503f f7 50 0b           	stab	iac
0373 5042 20 1a              	bra	inosend
0374                         iswitch3:
0375 5044 81 fd              	cmpa	#253
0376 5046 27 04              	beq	iswitch3a
0377 5048 81 fe              	cmpa	#254
0378 504a 26 07              	bne	iswitch4
0379                         iswitch3a:
0380 504c c6 fc              	ldab	#252
0381 504e f7 50 0b           	stab	iac
0382 5051 20 0b              	bra	inosend
0383                         iswitch4:
0384 5053 81 ff              	cmpa	#255
0385 5055 27 07              	beq	inosend
0386                         iswitch5:
0387 5057 81 10              	cmpa	#$10
0388 5059 27 03              	beq	inosend
0389                         iacsend:
0390 505b 33                 	pulb
0391 505c 0c                 	clc
0392 505d 39                 	rts
0393                         inosend:
0394 505e 33                 	pulb
0395 505f 0d                 	sec
0396 5060 39                 	rts
0397                         
0398                         do_ascii:
0399 5061 7d 51 7c           	tst	disp_ascii	* test ascii flag
0400 5064 27 04              	beq	a7bit		* zero: next check
0401 5066 81 80              	cmpa	#$80		* first non ascii
0402 5068 24 09              	bhs	anosend
0403                         a7bit:
0404 506a 7d 51 7d           	tst	disp_7bit	* test 7-bit flag
0405 506d 27 02              	beq	asend		* zero: send without change
0406 506f 84 7f              	anda	#$7F		* strip high bit
0407                         asend:
0408 5071 0c                 	clc
0409 5072 39                 	rts
0410                         anosend:
0411 5073 0d                 	sec
0412 5074 39                 	rts
0413                         
0414                         atogglemsg:
0415 5075 3c                 	pshx
0416 5076 37                 	pshb
0417 5077 ce 51 7c           	ldx	#disp_ascii	* get the flag address
0418 507a 3c                 	pshx			* save for later
0419 507b ce 50 cf           	ldx	#ATOGGLESTR	* print ascii message
0420 507e c6 0f              	ldab	#ATOGGLELEN
0421 5080 20 0b              	bra	toggleprint
0422                         
0423                         b7togglemsg:
0424 5082 3c                 	pshx
0425 5083 37                 	pshb
0426 5084 ce 51 7d           	ldx	#disp_7bit	* get the flag address
0427 5087 3c                 	pshx			* save for later
0428 5088 ce 50 de           	ldx	#B7TOGGLESTR	* print 7bit message
0429 508b c6 0f              	ldab	#B7TOGGLELEN
0430                         
0431                         toggleprint:
0432 508d bd 4f 24           	jsr	putstr
0433 5090 38                 	pulx			* get saved flag address
0434 5091 e6 00              	ldab	,x		* load value
0435 5093 27 07              	beq	toff		* its off
0436 5095 ce 50 ed           	ldx	#ONMSG		* print the on messge
0437 5098 c6 04              	ldab	#ONLEN
0438 509a 20 05              	bra	tvalueprint
0439                         toff:
0440 509c ce 50 f1           	ldx	#OFFMSG		* print off message
0441 509f c6 05              	ldab	#OFFLEN
0442                         tvalueprint:
0443 50a1 bd 4f 24           	jsr	putstr
0444 50a4 33                 	pulb
0445 50a5 38                 	pulx
0446 50a6 39                 	rts	
0447                         
0448                         
0449                         
0450                         * Stole this code from Micro Basic ROM
0451                         * BLNKTM	equ	$422B			* cursor blink timer (1)
0452                         * CRSPTR	equ	$4280			* cursor position
0453                         * CRSCLR	equ	$4282			* cursor color
0454                         * MCX Locations
0455 012b                    BLNKTM	equ	$012B			* cursor blink timer (1)
0456 0180                    CRSPTR	equ	$0180			* cursor position
0457 0182                    CRSCLR	equ	$0182			* cursor color
0458 50a7 02 c0              BLNKTM2	fdb	$2c0
0459                         * Blink the cursor if it is time
0460                         BLINK:
0461                         *LF83F	dec       BLNKTM              * decrement blink timer
0462                         *	bne       LF85E               * branch if not yet time to blink
0463 50a9 fe 50 a7           	ldx	  BLNKTM2
0464 50ac 09                 	dex
0465 50ad ff 50 a7           	stx	  BLNKTM2
0466 50b0 26 1c              	bne       LF85E               * branch if not yet time to blink
0467 50b2 b6 01 82           	ldaa      CRSCLR              * get current cursor state
0468 50b5 88 0f              	eora      #$0F                * toggle the four pixel bits
0469 50b7 b7 01 82           	staa      CRSCLR              * save new cursor state
0470 50ba 8a 80              	oraa      #$80                * set the graphics bit
0471 50bc fe 01 80           	ldx       CRSPTR              * point X to cursor location in Video RAM
0472 50bf a7 00              	staa      ,X                  * change the cursor color
0473                         *	ldab      #22                 * timer value when cursor is off
0474 50c1 ce 02 c0           	ldx       #$2c0               * timer value when cursor is off
0475 50c4 84 0f              	anda      #$0F                * test the cursor state
0476 50c6 27 03              	beq       LF85B               * branch if cursor is off
0477                         *	ldab      #88                 * timer value when cursor is on
0478 50c8 ce 02 c0           	ldx       #$2c0               * timer value when cursor is on
0479                         *LF85B	stab      BLNKTM              * restart the timer
0480 50cb ff 50 a7           LF85B	stx       BLNKTM2             * restart the timer
0481 50ce 39                 LF85E	rts
0482                         
0483 50cf 5b 41 53 43 49 49  ATOGGLESTR fcc	'[ASCII DISPLAY '
     20 44 49 53 50 4c
     41 59 20
0484 000f                    ATOGGLELEN equ	*-ATOGGLESTR
0485 50de 5b 37 2d 42 49 54  B7TOGGLESTR fcc	'[7-BIT DISPLAY '
     20 44 49 53 50 4c
     41 59 20
0486 000f                    B7TOGGLELEN equ	*-B7TOGGLESTR
0487 50ed 4f 4e 5d           ONMSG	fcc	'ON]'
0488 50f0 0d                 	fcb	CR
0489 0004                    ONLEN	equ	*-ONMSG
0490 50f1 4f 46 46 5d        OFFMSG	fcc	'OFF]'
0491 50f5 0d                 	fcb	CR
0492 0005                    OFFLEN	equ	*-OFFMSG
0493                         
0494 50f6 44 57 54 45 52 4d  MESSAGE	fcc	'DWTERM 0.1 FOR MC-10'
     20 30 2e 31 20 46
     4f 52 20 4d 43 2d
     31 30
0495 510a 0d 0d              	fcb	CR,CR
0496 510c 54 59 50 45 20 5b  	fcc	'TYPE [BREAK] TO QUIT,'
     42 52 45 41 4b 5d
     20 54 4f 20 51 55
     49 54 2c
0497 5121 0d                 	fcb	CR
0498 5122 44 57 20 4f 52 20  	fcc	'DW OR AT COMMANDS AT THE PROMPT'
     41 54 20 43 4f 4d
     4d 41 4e 44 53 20
     41 54 20 54 48 45
     20 50 52 4f 4d 50
     54
0499 5141 0d                 	fcb	CR
0500 004c                    MSGLEN	equ	*-MESSAGE
0501                         
0502 5142 44 57 3e 20        PROMPT	fcc	'DW> '
0503 0004                    PRLEN	equ	*-PROMPT
0504                         
0505 5146 0d                 BYEMSG	fcb	CR
0506 5147 54 48 41 4e 4b 53  	fcc	'THANKS FOR USING DWTERM, BYE!'
     20 46 4f 52 20 55
     53 49 4e 47 20 44
     57 54 45 52 4d 2c
     20 42 59 45 21
0507 5164 0d                 	fcb	CR
0508 5165 52 45 54 55 52 4e  	fcc	'RETURNING TO BASIC'
     49 4e 47 20 54 4f
     20 42 41 53 49 43
0509 5177 0d                 	fcb	CR
0510 0032                    BYELEN	equ	*-BYEMSG
0511                         
0512 5178 c8                 SLPCNTR	fcb	SLEEP_SLOW
0513                         
0514                         * global variables
0515                         * flag whether the channel is open
0516 5179 00                 channel_open	fcb	0	
0517                         * current channel status
0518 517a 00 00              status	zmb	2
0519                         * ascii flag - 0 - display all 
0520 517c 00                 disp_ascii	fcb	0
0521                         * 7-bit flag - 0 - display all 
0522 517d 00                 disp_7bit	fcb	0
0523                         
0524                         * bufffers
0525                         * command buffer
0526 517e 00 00 00 00 00 00  cmdbuf	zmb	BUFSIZ
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00
0527                         * data buffer
0528 5254 00 00 00 00 00 00  buffer	zmb	BUFSIZ
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00 00 00
     00 00 00 00
0529                         
0530                         
0531                         *******************************************************
0532                         *******************************************************
0533                         *******************************************************
0534                         * Serial Code Starts Here
0535                         *******************************************************
0536                         *******************************************************
0537                         *******************************************************
0538                         
0539 0003                    P2DATA      equ          $0003             ; Port 2 Data Register :
0540                         *                                          ;    bit 0 = serial output
0541                         *                                          ;    bit 2 = serial input
0542                         
0543                         
0544                         ***
0545                         ***  Variables used by the high speed serial routines.
0546                         ***  These reuse other temporary locations in Basic's Direct Page.
0547                         ***  The code makes timing assumptions based on Direct Page addressing.
0548                         ***
0549 00d6                    FP1EXP      equ          $00D6             ; floating point accumulator #1
0550 00d6                    SERSP       equ          FP1EXP            ; saved stack pointer
0551 00d8                    SERSUM      equ          FP1EXP+2          ; checksum accumulator
0552 00da                    SERPTR      equ          FP1EXP+4          ; IO byte pointer
0553 00dc                    SERCTR      equ          FP1EXP+6          ; IO byte counter
0554                         
0555                         
0556                         
0557                         *******************************************************
0558                         *
0559                         * SerRead
0560                         *    Receive a block of data through the serial port.
0561                         *    Times out if 2 (or 4) seconds ellapse without any data.
0562                         *    Serial format:  8-N-1 at 38400 bps
0563                         *
0564                         * Entry:
0565                         *     X  = storage address for incoming data
0566                         *     D  = number of bytes wanted
0567                         *  CC.C  = doubles initial timeout to 4 seconds if set
0568                         *
0569                         * Exit:
0570                         *    X  = 16 bit checksum of data received.
0571                         *    A  = clobberd.
0572                         *    B  = staus code:
0573                         *          0 = Success
0574                         *         -1 = Timed Out
0575                         *          1 = Framing Error
0576                         *   CC  = IRQ mask is set, Z and N reflect status code in B.
0577                         *
0578 532a 0f                 SerRead     sei                                 ; mask IRQs
0579 532b dd dc                          std         SERCTR                  ; save request count
0580 532d cc 00 00                       ldd         #0                      ; initialize..
0581 5330 dd d8                          std         SERSUM                  ; ..checksum
0582 5332 cc 04 01                       ldd         #$0401                  ; ACCA = input mask, ACCB = initial timeout MSB
0583 5335 c9 00                          adcb        #0                      ; double timeout MSB if carry set
0584 5337 09                             dex                                 ; adjust storage ptr for pre-increment
0585 5338 df da                          stx         SERPTR                  ; save storage ptr
0586 533a 9f d6                          sts         SERSP                   ; save stack pointer
0587                         
0588                         * Wait for start bit or timeout.
0589 533c 9e dc              rx010       lds         SERCTR      4  | 13     ; get request counter
0590 533e 27 51                          beq         rxDone      3  |        ; exit if all bytes received
0591 5340 95 03                          bita        P2DATA      3 /         ; check for start bit
0592 5342 27 23                          beq         rxByte      3 \         ; 
0593 5344 ce 00 00                       ldx         #0          3  | 9      ; initialize inner timeout loop counter
0594 5347 95 03                          bita        P2DATA      3 /         ; check for start bit
0595 5349 27 1c                          beq         rxByte      3 \  6      ; 
0596 534b 95 03              rx020       bita        P2DATA      3 /         ; check for start bit
0597 534d 27 18                          beq         rxByte      3 \         ; 
0598 534f 09                             dex                     3  | 9      ; decrement inner loop counter
0599 5350 95 03                          bita        P2DATA      3 /         ; check for start bit
0600 5352 27 13                          beq         rxByte      3 \         ; 
0601 5354 8c 00 01                       cpx         #1          4  | 10     ; set Carry if inner loop counter = 0
0602 5357 95 03                          bita        P2DATA      3 /         ; check for start bit
0603 5359 27 0c                          beq         rxByte      3 \         ; 
0604 535b 24 ee                          bcc         rx020       3  | 9      ; loop if carry clear
0605 535d 95 03                          bita        P2DATA      3 /         ; check for start bit
0606 535f 27 06                          beq         rxByte      3 \         ; 
0607 5361 5a                             decb                    2  | 11     ; decrement timeout MSB
0608 5362 26 e7                          bne         rx020       3 /         ; loop if timeout hasn't expired
0609 5364 5a                             decb                                ; ACCB = TIMEOUT status (-1)
0610 5365 20 2b                          bra         rxExit                  ; exit
0611                         
0612                         * Read one byte
0613 5367 34                 rxByte      des                     3 \         ; decrement the..
0614 5368 bf 00 dc                       sts         >SERCTR     5  |        ; ..request counter
0615 536b 31                             ins                     3  |        ; 3 cycle delay
0616 536c 9e da                          lds         SERPTR      4  | 24     ; point S to the location..
0617 536e 31                             ins                     3  |        ; ..where the byte will be stored
0618 536f 9f da                          sts         SERPTR      4  |        ; save storage ptr
0619 5371 c6 40                          ldab        #$40        2 /         ; setup ACCB for 7 shifts
0620 5373 96 03              rx030       ldaa        P2DATA      3           ; read data bit from serial port
0621 5375 09                             dex                     3 \         ; delay for..
0622 5376 08                             inx                     3  |        ; ..six cycles
0623 5377 de d8                          ldx         SERSUM      4  |        ; load checksum value into X
0624 5379 44                             lsra                    2  | 20     ; shift the data bit down..
0625 537a 44                             lsra                    2  |        ; ..to the lowest bit of ACCA..
0626 537b 04                             lsrd                    3  |        ; ..then into highest bit of ACCB
0627 537c 24 f5                          bcc         rx030       3 /         ; loop until 7 data bits have been read
0628 537e b6 00 03                       ldaa        >P2DATA     4           ; read 8th data bit
0629 5381 44                             lsra                    2 \         ; shift the data bit down..
0630 5382 44                             lsra                    2  |        ; ..to the lowest bit of ACCA..
0631 5383 04                             lsrd                    3  |        ; ..then into highest bit of ACCB
0632 5384 37                             pshb                    3  | 24     ; store received byte
0633 5385 3a                             abx                     3  |        ; add byte value to checksum
0634 5386 df d8                          stx         SERSUM      4  |        ; save checksum
0635 5388 cc 04 01                       ldd         #$0401      3  |        ; ACCA = mask, ACCB = Timeout MSB / FRAMING ERROR
0636 538b b5 00 03                       bita        >P2DATA     4 /         ; sample the stop bit
0637 538e 26 ac                          bne         rx010       3 \         ; loop if good stop bit
0638 5390 21                             fcb         $21                     ; skip next single-byte instruction (BRN opcode)
0639                         
0640                         * Epilog
0641 5391 5f                 rxDone      clrb                                ; ACCB = SUCCESS
0642 5392 9e d6              rxExit      lds         SERSP                   ; pop storage ptr off the stack
0643 5394 5d                             tstb                                ; setup CC.Z and CC.N to reflect status
0644 5395 39                             rts                                 ; return
0645                         
0646                         
0647                         *******************************************************
0648                         *
0649                         * SerWrite
0650                         *    Send a block of data through the serial port.
0651                         *    Serial format:  8-N-1 at 38400 bps
0652                         *
0653                         * Entry:
0654                         *    X  = address of first byte to send
0655                         *    D  = number of bytes to send
0656                         *
0657                         * Exit:
0658                         *   CC  = IRQ mask bit is set, Carry is cleared.
0659                         *    X  = 16 bit checksum of sent data.
0660                         *    A and B are clobbered.
0661                         *
0662                         *
0663 5396 dd dc              SerWrite    std         SERCTR                  ; store byte count
0664 5398 4f                             clra                                ; initialize..
0665 5399 5f                             clrb                                ; ..checksum..
0666 539a dd d8                          std         SERSUM                  ; ..to zero
0667 539c 86 11                          ldaa        #$11                    ; set bit 0 and the IRQ mask bit in ACCA
0668 539e 06                             tap                                 ; mask IRQs
0669                         
0670 539f 97 03              txByte      staa        P2DATA      3           ; transmit stop bit
0671 53a1 e6 00                          ldab        ,x          4 \         ; get next data byte
0672 53a3 08                             inx                     3  |        ; increment data ptr
0673 53a4 3c                             pshx                    4  |        ; save data ptr on stack
0674 53a5 de d8                          ldx         SERSUM      4  | 22     ; X = checksum value
0675 53a7 3a                             abx                     3  |        ; add byte value to checksum
0676 53a8 86 08                          ldaa        #8          2  |        ; ACCA = loop counter (start bit + 7 data bits)
0677 53aa 58                             lslb                    2 /         ; bit 7 into Carry; '0' into bit 0
0678                         
0679 53ab d7 03              tx010       stab        P2DATA      3           ; transmit bit 0 of ACCB
0680 53ad 56                             rorb                    2 \         ; move next bit into position
0681 53ae df d8                          stx         SERSUM      4  |        ; store checksum value
0682 53b0 3c                             pshx                    4  | 20     ; \ 9 cycle delay
0683 53b1 38                             pulx                    5  |        ; /
0684 53b2 80 01                          suba        #1          2  |        ; decrement loop counter (use instead of DECA to clear carry)
0685 53b4 26 f5                          bne         tx010       3 /         ; loop until 7 data bits have been sent
0686                         
0687 53b6 f7 00 03                       stab        >P2DATA     4           ; transmit 8th data bit (Ext Addressing for 24th cycle)
0688 53b9 4c                             inca                    2 \         ; ACCA = stop bit (MARK)
0689 53ba de dc                          ldx         SERCTR      4  |        ; X = remaining byte count (including this one)
0690 53bc 09                             dex                     3  | 21     ; decrement remaining byte count
0691 53bd df dc                          stx         SERCTR      4  |        ; store updated count
0692 53bf 38                             pulx                    5  |        ; restore data ptr from stack
0693 53c0 26 dd                          bne         txByte      3 /         ; loop if more bytes to send
0694                         
0695 53c2 97 03                          staa        P2DATA      3           ; transmit final stop bit
0696 53c4 de d8                          ldx         SERSUM      4           ; checksum is returned in X
0697 53c6 39                             rts                     5           ; return
0698                         
